# Disable some authentication business for switching to su
ZSH_DISABLE_COMPFIX=true

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

fpath=("~/.shell/zsh" $fpath)
source ~/.shell/zsh/dirpersist.plugin.zsh
source ~/.shell/zsh/git-auto-status.plugin.zsh
[ -d "$HOME/GIT/config/zsh-autosuggestions" ] || { mkdir -p $HOME/GIT/config && git clone https://github.com/zsh-users/zsh-autosuggestions.git $HOME/GIT/zsh-autosuggestions }
source ~/GIT/config/zsh-autosuggestions/zsh-autosuggestions.zsh

[ -d "$HOME/GIT/config/zsh-autosuggestions" ] || { mkdir -p $HOME/GIT/config && git clone git@github.com:jeffreytse/zsh-vi-mode.git $HOME/GIT/zsh-vi-mode }
source ~/GIT/config/zsh-vi-mode/zsh-vi-mode.zsh

source ~/GIT/config/zsh-z/zsh-z.plugin.zsh
# Nice up completion menus for z
zstyle ':completion:*' menu select

# Up and down arrows search by substring
[ -d "$HOME/GIT/config/zsh-history-substring-search" ] || { mkdir -p $HOME/GIT/config && git clone git@github.com:zsh-users/zsh-history-substring-search.git $HOME?GIT/config/zsh-history-substring-search }
source ~/GIT/config/zsh-history-substring-search/zsh-history-substring-search.zsh
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
# get keycodes by doing ctrl+v then key of interest

# Make - and _ both complete the same.  Needs work
# zstyle ':completion:*' matcher-list '' 'm:{-_}={_-}'
# Use smartcase with z
ZSHZ_CASE=smart

source ~/.shell/zsh/ohmy.sh
source ~/.shell/zsh/kris.zsh-theme

export EDITOR='nvim'

# Compilation flags
export ARCHFLAGS="-arch x86_64"

LESS+=" --no-init --quit-if-one-screen"

# Some voodoo for line searching (NOTE THE KEYCODES ARE WRONG)
# autoload -U up-line-or-beginning-search
# autoload -U down-line-or-beginning-search
# zle -N up-line-or-beginning-search
# zle -N down-line-or-beginning-search
# bindkey "$terminfo[kcuu1]" up-line-or-beginning-search # Up
# bindkey "$terminfo[kcud1]" down-line-or-beginning-search # Down

# For more termkeys see /etc/zsh/zshrc

setopt HIST_IGNORE_SPACE

# These all come with the shell repo so it is fine to source them directly
source ~/.shell/zsh/aliases.zsh
# source ~/.shell/zsh/extra.zsh
source ~/.shell/shell_aliases
source ~/.shell/shell_functions


# Source local configs if necessary
[[ -f ~/.config/nvim/.shell_nvim ]] && source ~/.config/nvim/.shell_nvim
[[ -f "/etc/arch-release" ]] && source ~/.shell/arch_config
[[ -f ~/.local_shell_config ]] && source ~/.local_shell_config
[[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh

# Add scripts
export PATH=~/scripts:$PATH

# Add local programs
[ -d "$HOME/.local/bin" ] && export PATH="$HOME/.local/bin:$PATH"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/kezra/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/kezra/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/kezra/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/kezra/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
NTASKS=2
function task_indicator {
    TASK=( task project:work project.not:workflow +READY )
    if [ `"${TASK[@]}" count` -gt "0" ]; then
        OUT=$("${TASK[@]}" minimal 2>/dev/null | head -n -2 | head -n $(($NTASKS+3)) )
        echo "$OUT"
    fi
}

hash task 2>/dev/null && task_indicator

# Add a default command to use ripgrep if ripgrep is installed
hash rg && export FZF_DEFAULT_COMMAND='rg --files --hidden --glob=!.git'
